import React, { useState } from "react";
import Result from "./Result";
import NoResult from "./NoResult";
import Toggle from "./Toggle";
function InputForm(props) {
  let [cityName, setCityName] = useState("");
  let [showResult, setShowResult] = useState(false);
  let [data, setData] = useState("");
  let [isError, setIsError] = useState("");
  let [forecast, setForecast] = useState();
  let isC = props.c;

  //this fn was generated by ChatGPT
  function getTodayDate() {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, "0"); // Months are 0-indexed
    const day = String(today.getDate()).padStart(2, "0");
    return `${year}-${month}-${day}`;
  }

  //Rest all done by Velan S
  function getDay(dateStr) {
    let days = [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday",
    ];
    return days[new Date(dateStr).getDay()];
  }

  function getFilterForeCastData(forecastData) {
    let filterForecast = [];

    filterForecast = forecastData.list.map((item) => {
      if (
        item.dt_txt.includes("12:00:00") &&
        !item.dt_txt.includes(getTodayDate())
      ) {
        return {
          temp: item.main.temp,
          day: getDay(item.dt_txt.substring(0, 10)),
          type: item.weather[0].main,
          image: item.weather[0].icon,
        };
      }
    });
    filterForecast = filterForecast.filter((item) => {
      if (item !== undefined) {
        return true;
      }
    });

    setForecast((v) => {
      return filterForecast;
    });
  }

  async function getForecastDetails() {
    let success = false;
    let apiKey = "df81016388570e4e1eba9f841c89b633";
    let todayWeatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${apiKey}&units=metric`;
    let forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=${apiKey}&units=metric`;
    //raises http request - get
    //fetch return promise then it resolved as response with http status codes using then()
    //if promise got rejected - catch block wil execute
    //response object will have data like json, text, blob
    //the data can be retrieved by using the following methods:
    // .json(), .text(), .blob()
    //the above methods also returesrns promise
    //those also got resolved by using .then()
    try {
      let forecast = await fetch(forecastUrl);

      if (forecast.ok) {
        let forecastData = await forecast.json();
        getFilterForeCastData(forecastData);
      }
      let response = await fetch(todayWeatherUrl);
      if (response.ok) {
        try {
          let getData = await response.json();
          success = true;
          setData((v) => {
            return getData;
          });
        } catch (e) {
          console.log("Unable to get data");
        }
      } else {
        throw new Error("Invalid City Name");
      }
    } catch (err) {
      return success;
    }
    return success;
  }

  return (
    <>
      <section className="input">
        <input
          className="cityInput"
          type="text"
          placeholder="Enter city name"
          value={cityName}
          onChange={(e) => {
            if (e.target.value === "") {
              setShowResult(false);
              setIsError(false);
            }
            setCityName(e.target.value);
          }}
          onKeyUp={async (e) => {
            if (e.key === "Enter") {
              let res = await getForecastDetails(cityName);
              if (res) {
                setIsError((v) => {
                  return { show: false, errorMsg: "Invalid City Name!" };
                });
                setShowResult((v) => true);
              } else {
                setIsError((v) => {
                  return { show: true, errorMsg: "Invalid City Name!" };
                });
                setShowResult((v) => false);
              }
            }
          }}
        />
        <button
          className="searchBtn"
          type="button"
          onClick={async (e) => {
            let res = await getForecastDetails(cityName);
            if (res) {
              setIsError((v) => {
                return { show: false, errorMsg: "Invalid City Name!" };
              });
              setShowResult((v) => true);
            } else {
              setIsError((v) => {
                return { show: true, errorMsg: "Invalid City Name!" };
              });
              setShowResult((v) => false);
            }
          }}
        >
          Search
        </button>
      </section>
      {cityName !== "" && showResult && (
        <Result
          details={[cityName, setCityName]}
          weatherData={data}
          foreCastData={forecast}
          c={isC}
        />
      )}
      {isError.show && <NoResult error={isError} />}
    </>
  );
}

export default InputForm;
